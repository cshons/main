#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() : head(nullptr) {}

    void insertAtBeginning(int data) {
        Node* newNode = new Node(data);
        newNode->next = head;
        head = newNode;
    }

    void insertAtPosition(int position, int data) {
        if (position == 0) {
            insertAtBeginning(data);
            return;
        }

        Node* newNode = new Node(data);
        Node* current = head;
        for (int i = 0; i < position - 1; ++i) {
            if (current == nullptr) {
                std::cout << "Position out of bounds." << std::endl;
                return;
            }
            current = current->next;
        }

        newNode->next = current->next;
        current->next = newNode;
    }

    void insertAtEnd(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            return;
        }

        Node* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }

        current->next = newNode;
    }

    void deleteAtPosition(int position) {
        if (head == nullptr) {
            std::cout << "List is empty. Cannot delete." << std::endl;
            return;
        }

        if (position == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* current = head;
        for (int i = 0; i < position - 1; ++i) {
            if (current == nullptr || current->next == nullptr) {
                std::cout << "Position out of bounds." << std::endl;
                return;
            }
            current = current->next;
        }

        Node* temp = current->next;
        current->next = current->next->next;
        delete temp;
    }

    void reverseAndDisplay() {
        Node* prev = nullptr;
        Node* current = head;
        while (current != nullptr) {
            Node* nextNode = current->next;
            current->next = prev;
            prev = current;
            current = nextNode;
        }
        head = prev;

        // Display reversed list
        current = head;
        while (current != nullptr) {
            std::cout << current->data << " -> ";
            current = current->next;
        }
        std::cout << "nullptr" << std::endl;
    }
};

int main() {
    LinkedList linkedList;
    linkedList.insertAtBeginning(1);
    linkedList.insertAtEnd(3);
    linkedList.insertAtPosition(1, 2);
    linkedList.reverseAndDisplay();
    linkedList.deleteAtPosition(1);
    linkedList.reverseAndDisplay();

    return 0;
}
